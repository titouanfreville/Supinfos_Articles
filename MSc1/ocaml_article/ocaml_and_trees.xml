<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE section PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd">
<section>
  <title>Les structures d'arbres en OCaml</title>
  <para/>
  <section>
    <title>Introduction</title>
    <para/>
    <para>
        Suite à l'article de découverte du langage Ocaml (<ulink url="https://www.supinfo.com/articles/single/2710-programmation-fonctionnelle-ocaml">https://www.supinfo.com/articles/single/2710-programmation-fonctionnelle-ocaml</ulink>), je vous proposes d'aller plus loin en découvrant les structures d'arbres en Ocaml. Je vous invites très fortement à lire cet article d'initiation à OCaml si vous ne connaissez pas le langage et n'avais pas de notion en programmation fonctionnelle.
    </para>
    <para>
        Pour vous guider à la découverte des arbres, je vais tout d'abord présenter la structure d'arbre, ses avantages et ses inconvénients dans le domaine de l'intelligence artificielle (IA). Ensuite, nous implémenterons des structures types et fonctions de base avant de résoudre des problèmes simples.
    </para>
    <para/>
  </section>
  <section>
    <title>PRÉREQUIS</title>
    <para/>
    <para>
      Pour la suite du voyage, il vous faudra avoir :
      <itemizedlist>
        <listitem>
          Installer OCmal sur votre local ou avoir une solution pour compiler et exécuter les programmes.
        </listitem>
        <listitem>
          Avoir un éditeur de texte avec la coloration syntaxique pour OCaml (parce que c'est plus agréables). J'utilise pour ma part Sublime Text 3 avec le package OCaml basique.
        </listitem>
        <listitem>
          Connaitre les bases de la programmation fonctionnelle et d'Ocaml
        </listitem>
      </itemizedlist>
    </para>
    <para/>
  </section>
  <section>
    <title>Les structures d'arbre</title>
    <para/>
    <section>
      <title>Qu'est-ce qu'un arbre en programmation fonctionnelle.</title>
      <para/>
      <para>
        Les arbres, en programmation, sont des structures de classement de données récursives. Ils sont représenter par la composition de deux éléments : des racines, et des feuilles. Un noeud est un arbre contenant n arbres, appeler fils, et un élément du type de l'arbre appelé racine. Une feuille est un élément du type de l'arbre pouvant être vide. Ils ont pour objectif de stocker un grand nombre de donné organisée afin d'avoir un accés rapide à celles-ci. A l'instar des listes, le parcours d'un abre se fait de la tête vers la fin. Cependant, si les listes permettent un ajout rapide de valeur et la restitution rapide des dernières valeurs entrées, la structure d'arbre sera plus lente pour ajouter un élément mais permettra de retrouver plus rapidement une valeur particulière. En effet, les règles d'organisation de l'arbre ralentissent l'ajout d'une valeur dans un gros ensemble de données mais permettent d'avoir une meilleur idée de sa localisation. Aussi, l'arbre est une structure spaciale. Une racine peut avoir plusieurs feuille, la où la liste est une ligne. On peut voir la liste comme un particulier d'arbre (qui serait alors appeler un arbre unaire car chaque racine à une feuille).
      </para>
      <para/>
      <para>
        Une représentation graphique d'un arbre sera donc :
        <mediaobject>
          <imageobject>
              <imagedata fileref='http://freville.iiens.net/images/arbre1.png' />
          </imageobject>
        </mediaobject>
      </para>
      <para/>
      <para>
        Nous venons donc de décrire la structure général d'un arbre. J'ai présenter comme nécessaire la condition de rangement car elle est présente dans la majorité des implémentation de structure d'arbre, mais n'est pas nécessaire a la structure en tant que telle. Elle est nécessaire pour son utilisation. Sans condition de rangement, il est difficile de savoir où trouver un élément car il n'y a pas règles pour le parcours de l'arbre. Nous travaillons donc uniquement avec des arbres ordonnées. Aussi, nous n'avons pas définis de règles quand au nombres de fils nécessaire dans un noeud. Cela dépend du type d'arbre dans le quel nous somme. Par exmple, dans le graphique précédent, chaque noeud à trois fils. Dans le cadre d'un arbre binaire (première structure que nous aborderons ici), chaque noeud à deux fils. De cette propriété découle une propriété d'équilabrage d'un arbre, et deux façons d'utiliser les arbres. Il nous est en effet possible d'éxiger que l'arbre soit équilibré, c'est à dire, qu'il n'y ait pas trop d'élement dans un fils plutôt qu'un autre. Au quel cas, on dira, d'une façon générale, que la différence de hauteur (distance la plus courte entre la racine et sa feuille la plus lointaine) ne doit pas exéder une certaine valeur (le plus souvent 1 ou 2). Nous travaillerons avec les deux structures, chacune ayant ses avantages et inconvénients.
      </para>
      <para/>
      <para>
        Voyons maintenant les avantages et inconvénients globeaux aux arbres par raport aux strucutres de listes (les tableaux n'étant pas une structure fonctionelle, je ne les inclus pas dans la comparaison).
      </para>
      <section>
        <title>Listes VS Arbres</title>
        <para/>
        <para>
          Tout d'abord, nous somme en présence de deux structures inductive. C'est à dire, des structures qui se définissent récursivement (en s'appellant elle même), et construite a partir d'un élément unique associé à une multiplicité d'élément. La tête d'une liste est un élément simple quand ça queue est une liste, la racine d'un arbre est un élément simple associé à deux arbres. Les deux structures sont donc très proches. Mais elle n'ont absolument pas la même utilisation.
        </para>
        <para/>
        <para>
          La structure de liste est une strucutre efficace dans utilisation de tampon. Si j'ai besoin de faire beaucoup d'opération d'entrée et sortie avec des sorties proches des derniers éléments entrées, la structure de liste sera plus efficace que la structure d'arbre. En effet, l'ajout d'un élément dans une liste est "instantané" car on prend la liste existante et on la place dans une nouvelle liste ayant pour tête l'élement voulue. Pour ajouter un élément dans un arbre, même si l'on décidait arbitrairement d'ajouter les éléments uniquement à la racine, il faudra d'abord séparer l'arbre actuelle en deux moitiées. Et dans la plus part des cas, nous définissons une règles d'ajout afin de conservé les élements de façon ordonées. Ce qui implique de prendre du temps pour parcourir l'arbre jusqu'a la positon de l'élément. Il en va de même pour la sortie d'un élément. Si l'objectif est de sortir le 3ème élement rentré, la structure de liste est la plus adapté.
        </para>
        <para/>
        <para>
          Par contre, si l'on a besoin d'une structure permettant de retouver un élément spécique et que l'on a une strucutre de données stables et avec peu d'entrée, un arbre sera beaucoup plus puissant qu'une liste. En effet, la complexité de la recherche dans un arbre est liée à sa hauteur et à la complexité de la méthode de tri, comme pour la liste, mais la hauteur d'un arbre de 1000 éléments sera nécessairement plus petite que la taille d'une liste de 1000 élément. La recherche d'un élément spécifique sera donc bien plus rapide dans un arbre, au détriment de l'ajout d'un élément.
        </para>
        <para/>
        <para>
          Pour plus de détails sur les arbres, je vous invites à consulter l'artice suivant :
          <ulink url="http://rperrot.developpez.com/articles/algo/structures/arbres/">http://rperrot.developpez.com/articles/algo/structures/arbres/</ulink>
        </para>
      </section>
    </section>
  </section>
  <para/>
  <para>
    Voyons maintenant nos premiers arbres.
  </para>
  <section>
    <title>Plantons nos premiers arbres.</title>
    <para/>
    <para>
      Pour ce premier arbre, je vais vous proposer de faire un arbre binaire simple contenant des entiers. La règles de rangement sera simple : l'élément présent à la racine d'un arbre doit toujours être plus grand que celui de la racine de son fils gauche et plus petit que la racine du fils droit. Nous allons donc créer une structure puis une fonction permettant d'ajouter les élément dans l'arbres. Nous nous cherchons pas avoir un arbre équilibré (ce qui implique que si le premier élément que j'ajoute est 0, les éléments du sous arbres gauche seront tous négatif, et ceux du sous arbres droit positif. Je vais également une fonction pour représenter graphiquement un arbre en OCaml (cette fonction fait appel aux module gaphique de Caml et n'est donc pas réellement de la programmation fonctionnelle, mais elle a l'avantage de bien voir ce qui ce passe quand on travaille sur les arbres).
    </para>
    <para/>
    <para>
      Commençons donc par créer la strucutre.
    </para>
    <para/>
    <para>
      Tout d'abord, notre abre ne travaille que sur des entiers. Les racines et les feuilles seront donc des entiers. Ce qui va donner la structure suivante :
      <programlisting langage="ocaml">
(*
    @type : myTree
    Define a simple tree using a match for single value and integers only.
    V -&gt; empty tree
    F (i) -&gt; Tree containing one element only
    N (ln * r * rn) -&gt; Tree with a left node, a root and a right node
*)
type myTree = V | F of int | N of (myTree * int * myTree)
      </programlisting>
    </para>
    <para>
      Ensuite, il nous faut une fonction pour créer un arbre puis une fonction pour y ajouter des éléments. Ce qui va donner :
      <programlisting langage="ocaml">
(*
    @newEmptyTree
    Simple function to initiate an empty tree using myTree type.
    @return empty tree V
*)
let newEmptyTree ()= V;;

(*
    @add
    Simple function to add an element into a myTree tree.
    @param i int element to add
    @param tree myTree tree in whom we which to add the element
    @return new tree with i added into old tree
*)
let rec add i tree =
    match tree with
    | V -&gt; F (i)
    | F (a) -&gt; if a &lt; i then N (V, a, F(i)) else N (F(i), a, V)
    | N(fg, r, fd) -&gt; if i &lt; r then N (add i fg, r, fd) else N(fg, r, add i fd);;
      </programlisting>
    </para>
    <para>
      Enfin, pour des questions de confort visuel, je vous propose d'ajouter une fonction permettant de dessiner l'arbre dans une fenêtre (du bas vers le haut)
      <programlisting langage="ocaml">
(* Loading graphics library to used in REPL *)
#load "graphics.cma";;
(* Opening graphics module to avoid having to call Graphics.method*)
open Graphics;;

(*
    @openGraph
    Create a new graphic window using provided size.
    @param w string width of the window in pixels
    @param h string heigth of the window in pixels
    @ensures a new graphic window is open
*)
let openGraph w h = let st = " " ^ w ^ "x" ^ h in open_graph st;;

let resetGraph = clear_graph;;

(*
    @treeDrawing
    Draw a tree in order
    @param t myTree tree to draw
    @param x int initial width position in px
    @param y int initial height position in px
    @param h int height of step in px
    @param w int width of step in px
    @param printer 'a -&gt; unit function to print element
    @param textColor color text color
    @param lineColor color line color
    @effect Draw correctly the tree.
*)
let rec treeDrawing t x y h w printer textColor lineColor=
  let drawingZoneWidth = w / 2 and drawingZoneHeight = h / 2 in
  match t with
  | F(l) -&gt; moveto (x + drawingZoneWidth) y; set_color textColor; printer l; set_color black;
  | N(fg,r,fd) -&gt; begin
                    moveto (x + drawingZoneWidth) (y + 12);
                    set_color lineColor; lineto (x + drawingZoneWidth / 2) (y + h - 5);
                    moveto (x + drawingZoneWidth) (y + 12); lineto (x+ drawingZoneWidth + drawingZoneWidth / 2) (y + h - 5);
                    set_color textColor; moveto (x + drawingZoneWidth) y; printer r; set_color black;
                    treeDrawing fg x (y+h) drawingZoneHeight drawingZoneWidth printer textColor lineColor;
                    treeDrawing fd (x+drawingZoneWidth) (y+h) drawingZoneHeight drawingZoneWidth printer textColor lineColor;
                  end
  | _ -&gt; moveto (x + drawingZoneWidth) y; set_color textColor; draw_string "X"; set_color black;;

let magicDrawing t printer =
resetGraph();
treeDrawing t 0 0 200 1800 printer red blue;;

let soi i = string_of_int i;;

let drawInt i = draw_string (soi i);;;

openGraph "1000" "1000";;

resetGraph;
      </programlisting>
    </para>
    <para>
      Si vous lancer ce code dans un interpréteur REPL Ocaml, vous devriez voir aparaitre la fenêtre suivante :
        <mediaobject>
          <imageobject>
              <imagedata fileref='http://freville.iiens.net/images/repl_caml_tree1.png' />
          </imageobject>
        </mediaobject>
    </para>
    <para/>
    <para>
      Nous avons donc créer un arbre binaire simple, opérant sur des entiers uniquement et sans équilibrage. Voyons quelques fonctions simple sur cet arbre.
    </para>
    <para/>
    <para>
      Tout d'abord, faison une fonction pour connaitre la hauteur de l'arbre, c'est à dire, la distance entre la racine et la feuille la plus lointaine.
    </para>
    <para>
      <programlisting langage="ocaml">
(*
  @getHeight
  Get tree heigh
  @param tree myTree tree we want to get hight from.
  @return tree height
*)
let rec getHeight tree =
  match tree with
  | V -&gt; 0
  | F(_) -&gt; 1
  | N(fg,_,fd) -&gt; max (getHeight fg) (getHeight fd) + 1;;
      </programlisting>
    </para>
    <para>
      Cette fonction est extrémement. Il suffit de parcourir l'arbre et d'ajouter 1 aux maximum de la hauteur des deux fils.
    </para>
    <para>
      Voyons maintenant comment récupérer un élément d'un arbre.
    </para>
    <para>
      Il nous faut à nouveau parcourir l'arbre. Mais si, dans l'exemple de la hauteur, on parcourais systématiquement l'intégralité de l'arbre, ici, nous ne manipulons l'arbre que juque l'élément soit trouvé. Et l'on ne s'arrêteras pas sur tous les éléments. Pour chaque noeud, il nous faudra comparer la racine à l'élément chercher. Si ils sont égaux, l'élément est trouver, si la racine est plus grande, l'élément se trouve à gauche sinon, il se trouve à doite.
    </para>
    <para>
      <programlisting langage="ocaml">
(*
    @isIn
    Function to check if some element is in the tree
    @param e int element to find
    @param tree myTree tree where to find the element
    @return true if e is in tree, false else
 *)
 let rec isIn e tree =
    match tree with
    | V -&gt; false
    | F(a) -&gt; a == e
    | N(fg,r,fd) -&gt; r == e || (r &gt; e &amp;&amp; isIn e fg) || (isIn e fd);;
      </programlisting>
    </para>
    <para>
      Vous pouvez facilement adapter cette fonction pour renvoyer l'élément à la place d'un booléan, ce qui pourrait être utile dans la suite de l'article. Mais voyons maintenant des fonctions un peu plus complexe. Toujours sur un arbre non équilibré bien sur.
    </para>
    <para/>
    <section>
     <title>Map</title>
      <para/>
      <para>
        La fonction map est une fonction que l'on rencontre souvent sur les structures récursive. Il s'agit de créer une fonction afin d'appliquer une autre fonction à chaque élément de l'ensemble récursif. Elle se base sur les fonctions que l'on a déjà rencontré et permet de transformer l'objet placé. Les fonctions appliqué sur map, dans notre cas, doivent prendre en argument un entier et renvoyer un entier (car notre structure d'arbre ne manipule que des entiers).
      </para>
      <para>
        Ce qui nous donne :
        <programlisting langage="ocaml">
(*
    @myMap
    Function to applu some function to each element in a tree
    @param tree myTree tree where to find the element
    @param f int -&gt; int function to apply'
    @return new tree
 *)
let rec myMap tree f=
    match tree with
    | F(a) -&gt; F (f a)
    | N(fg,r,fd) -&gt; N(myMap fg f, f r, myMap fd f)
    | _ -&gt; V;;
        </programlisting>
      </para>
      <para>
        Cette version de la fonction à le mérite d'être simple et de facilement vérifier que les opérations ont bien été réaliser sur les bons éléments. Mais elle pose un problème vis à vis de notre structure d'arbre : elle ne vérifie pas nécessairement les propriétés de tri. Pour faire un exemple simple, si je choisis de multiplier par -1 tous les éléments, je vais bien obtenir un arbre d'entier après le map, mais celui-ci n'obéira plus à la règle d'ordre choisi. Compléxifion donc légèrement notre map en ajoutant une fonction d'ajout d'arbre dans un arbres.
      </para>
      <para>
        Nous aurons alors les fonctions :
        <programlisting langage="ocaml">
(*
    @addTreeInTree
    Function to add a correct tree into a correct tree
    @param tree1 myTree tree to add
    @param tree2 myTree tree where to add
    @return new tree
 *)
let rec addTreeInTree tree1 tree2 =
    match tree1 with
    | V-&gt; tree2
    | F (e) -&gt; add e tree2
    | (N (fg, r, fd)) -&gt;
        begin
            let newTree = add r tree2 in
            let newTree = addTreeInTree fg newTree in
            addTreeInTree fd newTree
        end;;
(*
    @myMap
    Function to applu some function to each element in a tree
    @param tree myTree tree where to find the elements
    @param f int -&gt; int function to apply'
    @return new tree correctly formed
 *)
let rec myMap tree f =
    match tree with
    | F(a) -&gt; F (f a)
    | N(fg,r,fd) -&gt; let tmpTree = add (f r) (myMapEasy fg f) in addTreeInTree tmpTree (myMapEasy fd f)
        </programlisting>
      </para>
    </section>
    <para/>
    <para>
      Nous voilons donc avec une boite à outils basique sur les arbres. Mais, à ce niveau la, nos arbres sont correct, mais pas très beau visuellement. En effet, ils peuvent être très mal équilibrer, allant jusqu'à ressembler à des listes.
    </para>
  </section>
  <para/>
  <para>
    Voyons donc comment mieux créer les arbres pour que ceux-ci soient plus utiles et plus propre. Toujours dans le cas d'arbre binaire sur des entiers bien sur.
  </para>
  <section>
    <title>Mon beau sapin</title>
    <para/>
    <para>
      Afin que nos arbre soit plus efficace, nous allons voir comment les équilibrer et faire en sorte qu'il n'y aie pas de trop grands écarts entre les fils d'une racine. Notre structure ne va pas changer, nous travaillons toujours sur des arbres binaire d'entiers. Les seuls fonctions à adapter sont les fonctions d'ajout dans un arbre. Afin d'équilibrer nos arbres, nous décrétons qu'à présent, la différence de hauteur entre deux fils ne doit pas être supérieur à un. Il nous faut alors créer deux fonctions : une fonction pour décaler les arbres vers la droite, et une fonction pour décaler les arbres vers la gauche (comme une rotation).
    </para>
    <para>
      Côté code :
      <programlisting langage="ocaml">
(*
    @rightRotate
    Swap tree element to right
    @param tree myTree tree to rotate
    @return tree rotated
 *)
let rec rightRotate tree =
    match tree with
    | N(F(a),r,V) -&gt; N(V, a, F(r))
    | N(F(a),r,F(b)) -&gt; N(V, a, N(V, r, F(b)))
    | N(
        N(fgg, rg, fgd),
        r, fd
      ) -&gt; N(fgg, rg, N(fgd, r, fd))
    | _ -&gt; tree;;

(*
    @leftRotate
    Swap tree element to left
    @param tree myTree tree to rotate
    @return tree rotated
 *)
let rec leftRotate tree =
    match tree with
    | N(V,r,F(a)) -&gt; N(F(r), a, V)
    | N(F(a),r,F(b)) -&gt; N(N(F(a),r,V), b, V)
    | N(
        fg, r,
        N(fdg, rd, fdd)
      ) -&gt; N(N(fg, r, fdg), rd, fdd)
    | _ -&gt; tree;;
      </programlisting>
    </para>
    <para>
      Puis une fonction utilisant nos rotations afin d'équilibrer un arbre.
    </para>
    <para>
      <programlisting langage="ocaml">
(*
    @balance
    Balance a tree to avoid having a big useless tree
    @param tree myTree tree to balance
    @return tree balanced
 *)
let rec balance tree =
    match tree with
    | V -&gt; V
    | F (_) -&gt; tree
    | N (fg, _, fd) -&gt; begin
        let h1 = getHeight (balance fg) and h2 = getHeight (balance fd) in
        let diff = h1 - h2 in
        if (diff &gt; 1)
        then balance (rightRotate tree)
        else
            if (diff &lt; -1)
            then balance (leftRotate tree)
            else tree
    end
      </programlisting>
    </para>
    <para>
      Enfin, il nous faut ausser l'équilibre de l'arbre lors d'ajout d'élément ou d'arbre.
      <programlisting langage="ocaml">
(*
    @add
    Simple function to add an element into a myTree tree.
    @param i int element to add
    @param tree myTree tree in whom we which to add the element
    @return new tree with i added into old tree
*)
let rec add i tree =
    match tree with
    | V -&gt; F (i)
    | F (a) -&gt; if a &lt; i then N (V, a, F(i)) else N (F(i), a, V)
    | N(fg, r, fd) -&gt; if i &lt; r then balance (N (add i fg, r, fd)) else balance (N(fg, r, add i fd));;
      </programlisting>
    </para>
    <para>
      Vous pouvez maintenant utilisé n'importe la qu'elle des fonctions crée dans la partie précédente. L'arbre sera équilibré tant que l'ajout d'élément n'est réaliser que par la fonction add.
    </para>
    <para/>
  </section>
  <para/>
  <para>
    Voyons maitenant comment abstraire nos arbres afin de pouvoir utiliser autre chose que des entiers.
  </para>
  <section>
    <title>Arbre binaire équilibré non typé</title>
    <para/>
    <para>
      Pour adapter nos arbres et en supprimer les contraintes de type, il va nous falloir définir le type en utilisant une inconnue. Il va alors ressembler à:
    </para>
    <para>
      <programlisting langage="ocaml">
(*
    @type : myTree
    Define a simple tree using a match for single value and any type.
    V -&gt; empty tree
    F (i) -&gt; Tree containing one element only
    N (ln * r * rn) -&gt; Tree with a left node, a root and a right node
*)
type myTree = V | F of int | N of (myTree * int * myTree)
      </programlisting>
    </para>
    <para/>
    <para>
      Ensuite, nous avons deux possibilité, en fonction de la façon dont on veut que le code soit utiliser. Si vous en faire une librairie, la seule fonction a modifier sera la fonction de dessin. Sinon, il nous faut ajouter une fonction en paramètre pour pouvoir donner la comparaison correcte, si vous utilisait un type définis par vous même par exemple.
    </para>
    <para/>
    <para>
      Modifion donc nos fonction pour accepter différente fonction de tri.
    </para>
    <para>
      <programlisting langage="ocaml">
(*
    @add
    Simple function to add an element into a myTree tree.
    @param i 'a element to add
    @param tree myTree tree in whom we which to add the element
    @param cmp 'a -&gt; 'a -&gt; bool comparaison function used to sort element in tree
    @return new tree with i added into old tree
*)
let rec add i tree cmp =
    match tree with
    | V -&gt; F (i)
    | F (a) -&gt; if cmp a i then N (V, a, F(i)) else N (F(i), a, V)
    | N(fg, r, fd) -&gt; if cmp i r then balance (N (add i fg cmp, r, fd)) else balance (N(fg, r, add i fd cmp));;

(*
    @addTreeInTree
    Function to add a correct tree into a correct tree
    @param tree1 myTree tree to add
    @param tree2 myTree tree where to add
    @param cmp 'a -&gt; 'a -&gt; bool comparaison function used to sort element in tree
    @return new tree
 *)
let rec addTreeInTree tree1 tree2 cmp=
    match tree1 with
    | V-&gt; tree2
    | F (e) -&gt; add e tree2  cmp
    | (N (fg, r, fd)) -&gt;
        begin
            let newTree = add r tree2  cmp in
            let newTree = addTreeInTree fg newTree  cmp in
            addTreeInTree fd newTree  cmp
        end;;

(*
    @isIn
    Function to check if some element is in the tree
    @param e int element to find
    @param tree myTree tree where to find the element
    @param cmp 'a -&gt; 'a -&gt; bool comparaison function used to sort element in tree
    @return true if e is in tree, false else
 *)
 let rec isIn e tree cmp =
    match tree with
    | V -&gt; false
    | F(a) -&gt; a == e
    | N(fg,r,fd) -&gt; r == e || (cmp r e &amp;&amp; isIn e fd cmp) || (isIn e fg cmp);;

(*
    @myMap
    Function to applu some function to each element in a tree
    @param tree myTree tree where to find the elements
    @param f int -&gt; int function to apply
    @param cmp 'a -&gt; 'a -&gt; bool comparaison function used to sort element in tree
    @return new tree correctly formed
 *)
let rec myMap tree f cmp=
    match tree with
    | F(a) -&gt; F (f a)
    | N(fg,r,fd) -&gt; let tmpTree = add (f r) (myMapEasy fg f) cmp in addTreeInTree tmpTree (myMapEasy fd f)
    | _ -&gt; V;;
      </programlisting>
    </para>
    <para>
      Cette fois, il nous a fallu modifier toutes les fonctions utilisant l'ordre de classement, suivant le même principe que pour la fonction map. Nous pouvons alors modifier a souhait l'ordre de tri, créer le notre et spécifier nos arbre binaire tout en conservant un certain aspect librairie.
    </para>
    <para/>
    <para>
      Voyons maintenant des stuctures d'arbre plus large, les arbres n aires.
    </para>
    <para/>
  </section>
  <section>
    <title>Arbres n-aires</title>
    <para/>
    <para>
      Les arbres n-aires sont des structures d'arbres plus étendus. Plusieurs solutions s'offrent à nous pour créer ces arbres. Soit nous supposons que la valeur `n` est fixe. Soit nous voulons gérer des arbres n-aires variable sans connaissance de la valeur de `n` a chaque noeud.
    </para>
    <para/>
    <para>
      Nous avons alors deux cas de figure. Le cas où le 'n' de notre abre n-aire est connue, et le cas où il n'est pas connue.
    </para>
    <para>
      Dans le premier cas, nous pouvons adapter directement les codes vues jusqu'à présent en définissant la structure non plus comme un triplet mais comme un tuples de taille n+1 (la racine plus chacun des noeuds). Je vous laisse le soin de travailler vous-même cette solution. Ma version de cette gestion sera trouvable dans le répertoire consacré à cet article: <ulink url="https://github.com/titouanfreville/Supinfos_Articles/tree/master/MSc1/ocaml_article/resources">https://github.com/titouanfreville/Supinfos_Articles/tree/master/MSc1/ocaml_article/resources</ulink>
    </para>
    <para/>
    <para>
      Dans l'autre cas, nous devons résoudre le problème de réprésentation d'une quantité inconnue. Et il convient aussi de s'interroger sur la pertinance d'une structure équilibré dans une telle situation.
    </para>
    <para>
      En effet, nous avons introduit le concept d'équilabrage lors du travail sur les arbres binaires. Ce type de structure est pertinante sur un arbre dont le nombre de fils maximale est connue, car il est possible de déterminer une logique d'ordre sur une telle structure (à condition que le type de donnée s'y prête). Mais si le nombre d'élément est inconnue, nous ne sommes probablement pas dans un cas ou l'équilibrage est primordial. En effet, les structures n-aires où n est inconnue vont souvent être utiliser pour des classements complexes style création d'un dictionnaire pour une langue. Nous savons que la structures n'aura jamais plus de 26 fils par noeud. Cependant, il n'est pas utile d'équilibré l'arbre, car le type de recherche qui nous interresse ici est une recherche de classement. Lors de la recherche dans un arbre dictionnaire, je ne vais pas chercher le mot "lambda" directement dans un feuille mais si il existe un chemin dans le dictionnaire menant à "lambda" lettre par lettre avec une sortie sur lambda.
    </para>
    <para/>
    <para>
      Implémentons donc un arbre dictionnaire comme exemple pour les arbres n-aires quelconques.
    </para>
    <para/>
    <para>
      La structure est simplement définis de la sorte:
      <itemizedlist>
        <listitem>E représente le dictionnaire vide</listitem>
        <listitem>
          L (l) représente une feuille du dictionnaire, c'est à dire, un élément qui n'a plus de suite. Nous l'utilisons ici pour montrer la fin d'un mot. Cependant, si cette feuille représente L (a), cela ne veut pas dire qu'il n'existe pas de suffixe possible. Il permet juste d'indiquer un mot trouver.
        </listitem>
        <listitem>
          N (l * dic) représente l'ensemble des suites possibles pour une lettre donnée.
        </listitem>
      </itemizedlist>
    </para>
    <para>
      Ce qui donne le code suivant:
      <programlisting langage="ocaml">
        type dicTree = E | L of char | N of char * dicTree list
      </programlisting>
    </para>
    <para/>
    <para>
      Une fois notre structure définie, il nous faut définir les fonctions permettants de la manipuler sans risque.
    </para>
    <para>
      Dans notre cas, nous voulons être sure qu'une lettre n'apparaît pas plus de deux fois dans un suite liée à un mot (une fois si elle existe dans la suite de mot, une fois si elle est finale). Il nous faut également un point d'entrée globale dans l'arbre qui soit un caractère abscent des suites de mots, afin d'avoir notre noeud initial. Dans mon exemple, j'ai choisi d'utiliser l'espace (' ') pour base. D'autres caractère peuvent être utiliser, tel que $ tant qu'il ne sont pas présent dans les mots que nous voulons classer.
    </para>
    <para>
      Nous définissons alors la fonction d'ajout d'un élément dans l'arbre ainsi :
      <programlisting langage="ocaml">
        let rec createDicNodeFromList l =
            match l with
            | [] -&gt; E
            | t::[] -&gt; L t
            | t::q -&gt; N(t, createDicNodeFromList q :: [])

        let rec addCharInNode e childs =
          match childs with
          | [] -&gt; L e :: []
          | t::q -&gt; match t with
            | L c -&gt; if e == c then childs else addCharInNode e q
            | _ -&gt; addCharInNode e q;;

        (*
          @addInDic_rec
          Word to dic
          @param word char list word to add
          @param tree dicTree dictionnary for the word
          @return new dicTree with word added
        *)
        let rec addInDic_rec word dic =
          match (word, dic) with
          | (_, N(' ', tl)) -&gt; N(' ', addWordInNode word tl)
          | ([], _) -&gt; dic
          | (t::[], E) -&gt; L t
          | (t::[], L c) -&gt; N(c, (L t)::[])
          | (t::[], N(c, tl)) -&gt; N(c, addCharInNode t tl)
          | (t::q, E) -&gt; createDicNodeFromList word
          | (t::q, L c) -&gt; N(c, (createDicNodeFromList word)::[])
          | (t::q, N(c, tl)) -&gt; N(c, addWordInNode word tl)
        and addWordInNode word dicList =
          match (word, dicList) with
          | (t::q, []) -&gt; let sd = L t in let el = addInDic_rec q sd in el :: []
          | (t::q, n :: dq) -&gt; match n with
            | L _ -&gt; addWordInNode word dq
            | N(c, ch) -&gt; if t == c then addInDic_rec q n :: dq else n :: addWordInNode word dq
          | _ -&gt; dicList;;

        let addInDic word dic =
          let cList = stringToList word in addInDic_rec cList dic;;
      </programlisting>
    </para>
    <para>
      Nous voyons ici une définission simultanée pour la fonction d'ajout d'un mot dans un dictionnaire. Cela est necessaire pour que les fonctions se reconnaissent. Si elles étaient définis séparemment, il serait impossible à l'une des deux de connaitre l'autre.
    </para>
    <para/>
    <para>
      Nous somme donc désormais capable d'ajouter des éléments dans un arbre correctement initialisé. Pour éviter les erreurs de l'utilisateur, nous pouvons définir une fonction d'initialisation pour les dictionnaires.
    </para>
    <para>
      Mais interressons nous plutôt a l'intérêt du dictionnaire, a savoir valider un mot.
    </para>
    <para>
      Implémentons une fonction qui va vérifier l'existence d'un mot dans notre dictionnaire.
    </para>
    <para>
      <programlisting langage="ocaml">
let rec isValidWord_rec word dic =
  match (word, dic) with
  | (t::[], L c) -&gt; t == c
  | (t::q, N(c, tl)) -&gt; if c == ' '
    then validateInNode word tl
    else t == c &amp;&amp; validateInNode q tl
  | (_, _) -&gt; false
and validateInNode word dicList =
  match (word, dicList) with
  | (t::_, n :: dq) -&gt; begin
    match n with
    | N(c, ch) -&gt; if t == c then isValidWord_rec word n else validateInNode word dq
    | L e -&gt; if t == e then isValidWord_rec word n else validateInNode word dq
    | _ -&gt; validateInNode word dq
  end
  | (_, _) -&gt; false;;

let isValidWord word dic =
  let cList = stringToList word in isValidWord_rec cList dic;;
      </programlisting>
    </para>
  </section>
  <para/>
  <para>
    Je vous remercie d'avoir lue cet article et espère que vous l'avez apprécié, et je vous laisse avec un rappel du lien vers les codes utiliser dans cet articles.
  </para>
  <para/>
  <para>
    <ulink url="https://github.com/titouanfreville/Supinfos_Articles/tree/master/MSc1/ocaml_article/resources">https://github.com/titouanfreville/Supinfos_Articles/tree/master/MSc1/ocaml_article/resources</ulink>
  </para>
</section>